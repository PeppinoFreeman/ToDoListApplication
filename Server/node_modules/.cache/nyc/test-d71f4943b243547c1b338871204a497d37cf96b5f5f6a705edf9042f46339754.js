process.env.NODE_ENV = "test";

const chai = require("chai"),
  chaiHttp = require("chai-http"),
  request = require("supertest"),
  server = require("../server").app,
  routes = require("../lib/routes").Routes;
const Category = require("../lib/Schema").Categories;
const Task = require("../lib/Schema").Task;
const expect = chai.expect;

chai.use(chaiHttp);

  /*  
  beforeEach(() => {
    return mongoose.connect("mongodb://localhost/ToDoDatabase", {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      useFindAndModify: false,
    });
  });
  */
  /*
  it("Récupère la liste des tâches", (done) => {
    request(server)
      .get(routes.collection)
      .end((err, res) => {
        expect(res).to.have.status(200);
        expect(res.body).to.be.a("array");
        console.log(res.body);
        done();
      });
  });
  it("Ajoute une tâche", (done) => {
    request(server)
      .post(routes.collection)
      .send({ title: "qsdsd", type: "aze" })
      .end((err, res) => {
        expect(res).to.have.status(200);
        // res.body.should.be.a("object");
        console.log(res.body);
        done();
      });
  });
  */
 describe("Requêtes", () => {
  const selected = "House",
      updated = "Maison";  
  it("Ajoute une catégorie", (done) => {
    request(server)
      .post(routes.category)
      .send({ newCategory: "House" })
      .end((err, res) => {
        expect(res).to.have.status(200);
        expect(res.body).to.be.a("object");
        expect(res.body).to.contain.property("category", "House");
        expect(res.body).to.contain.property("_id");
        done();
      });
  });

  it("Récupère la liste des catégories", (done) => {
    request(server)
      .get(routes.category)
      .end((err, res) => {
        expect(res).to.have.status(200);
        expect(res.body).to.be.a("array");
        expect(res.body.length).to.be.gte(1);
        expect(res.body[0]).to.contain.property("category", "House");
        done();
      });
  });

  it("Modifie une catégorie", (done) => {
    request(server)
      .put(routes.category)
      .send({ selectedCategory: selected, newCategory: updated })
      .end((err, res) => {
        expect(res).to.have.status(200);
        done();
      });
    request(server)
      .get(routes.category)
      .end((err, res) => {
        expect(res).to.have.status(200);
        expect(res.body[0]).to.contain(updated);
      });
  });

  it("Supprime une catégorie", (done) => {
    request(server)
      .post(routes.category_delete)
      .send({ selectedCategory:  })
      .end((err, res) => {
        expect(res).to.have.status(200);
        done();
      });
  });
});
